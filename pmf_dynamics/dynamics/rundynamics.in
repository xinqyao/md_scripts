#!/bin/bash 

export LD_LIBRARY_PATH=/software/usr/cuda-8.0/lib64:/usr/lib64/openmpi/lib/:${LD_LIBRARY_PATH}
export CUDA_VISIBLE_DEVICES="0"

trap "exit" INT TERM
trap "kill 0" EXIT

prv=180
#set simult = (2500000 5000000 10000000 25000000 37500000 50000000)
simult=(1000000 2500000 5000000 10000000)
tnum=0

#for direc in 2.8 3.5 4.2 4.9 5.6; do
for direc in 3.5 4.2 4.9 5.6; do
  if ! test -r $direc; then
     mkdir $direc
  fi

  cd $direc

  echo $direc, $tnum, ${simult[$tnum]}

  if ! test -r production.${prv}.restrt; then
     cp ../../windows/umbrella_${prv}/production.A.restrt ./production.${prv}.restrt
  fi

  if ! test -r ffpspr.bd.prmtop; then 
    tt=$( echo 14.0 | awk '{printf "%.8E", $1/4}' )
    sed "s/8.33250000E+00/$tt/" ../../prep/ffpspr_tpp_box.prmtop > ./ffpspr.bd.prmtop
  fi

  if ! test -r ffpspr_box.prmtop; then 
    tt=$( echo $direc | awk '{printf "%.8E", $1/4}' )
    sed "s/8.33250000E+00/$tt/" ../../prep/ffpspr_tpp_box.prmtop > ./ffpspr_box.prmtop
  fi
  
  cat > production.bd.in<<eofxx
Initial minimization w/ position restraints on CypA, 9.0 cut
 &cntrl
  timlim = 999999, nmropt = 0, 
  ntx    = 5,       irest  = 1,       ntrx   = 1,      ntxo   = 1,
  ntpr   = 50000,      ntwx   = 0,       ntwv   = 0,      ntwe   = 0,
  ioutfm = 0, ntwr = 50000,
  ntwprt = 0,

  ntf    = 2,       ntb    = 2,       igb  = 0,      dielc  = 1.0,
  cut    = 9.0,     nsnb   = 10,

  ipol   = 0,

  ibelly = 0,       ntr    = 0,

  imin   = 0,       
  maxcyc = 1000,   
  ncyc   = 5000,   
  ntmin  = 1,       dx0    = 0.1,     drms   = 0.0001,

  nstlim = 500000,
  nscm   = 10000, iwrap = 1,
  t      = 0.0,     dt     = 0.002,

  temp0  = 300.0,   tempi  = 100.0,   
  ig     = -1,   
  ntt    = 3,       
  tautp  = 2.0,  
  gamma_ln = 1.0,

  ntp    = 1,       pres0  = 1.0,     comp   = 44.6,
  taup   = 1.0,  
  barostat = 2,

  ntc    = 2,       tol    = 0.0001,

  jfastw = 0,       

  ivcap  = 0,       fcap   = 1.5,
 /
eofxx

  cat > noe.in <<eof
# angle
 &rst
   ixpk= 0, nxpk= 0, iat=2571, 2582, 2584, 2593, r1=0, r2=180, r3=180, r4=360,
    rk2=0.0, rk3=0.0, ir6=1, ialtd=0,
 /
eof

  for ((number=1; number<=100; number++)); do

     pmemd.cuda -O -i production.bd.in -p ffpspr.bd.prmtop -c production.${prv}.restrt -o production.bd.out -r production.bd.restrt

     sleep 15

     cp production.bd.restrt production.${prv}.restrt

     cat > production.in<<eofx
Initial minimization w/ position restraints on CypA, 9.0 cut
 &cntrl
  timlim = 999999, nmropt = 1, 
  ntx    = 5,       irest  = 1,       ntrx   = 1,      ntxo   = 1,
  ntpr   = 50000,      ntwx   = 0,       ntwv   = 0,      ntwe   = 0,
  ioutfm = 0, ntwr = 50000,
  ntwprt = 0,

  ntf    = 2,       ntb    = 2,       igb  = 0,      dielc  = 1.0,
  cut    = 9.0,     nsnb   = 10,

  ipol   = 0,

  ibelly = 0,       ntr    = 0,

  imin   = 0,       
  maxcyc = 1000,   
  ncyc   = 5000,   
  ntmin  = 1,       dx0    = 0.1,     drms   = 0.0001,

  nstlim = ${simult[tnum]},
  nscm   = 10000, iwrap = 1,
  t      = 0.0,     dt     = 0.002,

  temp0  = 300.0,   tempi  = 100.0,   
  ig     = -1,   
  ntt    = 3,       
  tautp  = 2.0,  
  gamma_ln = 1.0,

  ntp    = 1,       pres0  = 1.0,     comp   = 44.6,
  taup   = 1.0,  
  barostat = 2,

  ntc    = 2,       tol    = 0.0001,

  jfastw = 0,       

  ivcap  = 0,       fcap   = 1.5,
 /
 &wt type='DUMPFREQ', istep1=10  /
 &wt type='END'  /
DISANG=noe.in
DUMPAVE=ang.${number}.out
eofx

#     pmemd.cuda -O -i production.in -p ffpspr_box.prmtop -c production.bd.restrt -o production.out -r production.restrt &
     pmemd.cuda -O -i production.in -p ffpspr_box.prmtop -c production.bd.restrt -o production.out -r production.restrt 

#     sleep 60

#     while test -r ../isodetect; do
#        if test -r iso.${number}.out.pre; then
#           if ../isodetect ang.${number}.out iso.${number}.out 175 100 9 iso.${number}.out.pre; then
#              break
#           fi
#        else
#           if ../isodetect ang.${number}.out iso.${number}.out 175 100 9; then
#              break
#           fi
#        fi
#        mv iso.${number}.out iso.${number}.out.pre
#        sleep 60
#     done

#     if test $( jobs -pr | wc -l ) -gt 0; then
#        kill -15 $(jobs -pr)
#        wait
#     fi

     sleep 15

  done

  echo "Exiting directory ..."

  cd ..

#@ tnum = $tnum + 1
let tnum=tnum+1

done
